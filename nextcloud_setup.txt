Yes, you can still configure Nextcloud to properly serve .well-known resources and access your server over a home network, even without a domain name. By correctly configuring your Nextcloud instance and your web server, you can enable access and resolve the issues you are facing. I'll walk you through a detailed setup, considering your specific scenario:
Scenario Setup
	•	Nextcloud Server: Running on a Linux Ubuntu machine.
	•	Nextcloud Installation Path: /var/www/nextcloud.
	•	Server's Local Static IP: Let's assume it's 192.168.1.100.
	•	Client Device: MacBook or any other device on the same home WiFi network.
	•	Home Network: Connected to the internet but using local IPs for internal communication.
Step-by-Step Configuration
1. Set Static IP Address for the Nextcloud Server
Make sure your Nextcloud server has a static IP address within your home network. This ensures that it always gets the same IP address (e.g., 192.168.1.100).
	•	Edit the network configuration file on your Linux server: bashCopy code  sudo nano /etc/netplan/01-netcfg.yaml
	•	  
	•	Example configuration: yamlCopy code  network:
	•	  version: 2
	•	  ethernets:
	•	    eth0:
	•	      dhcp4: no
	•	      addresses:
	•	        - 192.168.1.100/24
	•	      gateway4: 192.168.1.1
	•	      nameservers:
	•	        addresses: [8.8.8.8, 8.8.4.4]
	•	  
	•	Apply the configuration: bashCopy code  sudo netplan apply
	•	  
2. Configure Apache for Nextcloud
Ensure Apache is set up to serve your Nextcloud instance correctly. Modify the Apache configuration file for Nextcloud:
	•	Open the Apache configuration file: bashCopy code  sudo nano /etc/apache2/sites-available/nextcloud.conf
	•	  
	•	Basic configuration: apacheCopy code  <VirtualHost *:80>
	•	    ServerAdmin admin@localdomain
	•	    DocumentRoot /var/www/nextcloud
	•	    ServerName 192.168.1.100
	•	
	•	    Alias /nextcloud "/var/www/nextcloud/"
	•	
	•	    <Directory /var/www/nextcloud/>
	•	        Options +FollowSymlinks
	•	        AllowOverride All
	•	        Require all granted
	•	
	•	       <IfModule mod_dav.c>
	•	          Dav off
	•	       </IfModule>
	•	
	•	       SetEnv HOME /var/www/nextcloud
	•	       SetEnv HTTP_HOME /var/www/nextcloud
	•	    </Directory>
	•	
	•	    ErrorLog ${APACHE_LOG_DIR}/nextcloud_error.log
	•	    CustomLog ${APACHE_LOG_DIR}/nextcloud_access.log combined
	•	</VirtualHost>
	•	  
	•	Enable the site and necessary modules: bashCopy code  sudo a2ensite nextcloud.conf
	•	sudo a2enmod rewrite headers env dir mime ssl
	•	sudo systemctl restart apache2
	•	  
3. Enable HTTPS with Self-Signed SSL Certificates
Even without a domain, you can use a self-signed SSL certificate to enable HTTPS:
	•	Generate a self-signed SSL certificate: bashCopy code  sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nextcloud-selfsigned.key -out /etc/ssl/certs/nextcloud-selfsigned.crt
	•	  
	•	Fill in the details as prompted. Common Name (CN) should match your static IP, 192.168.1.100.
	•	Edit Apache configuration to enable SSL: apacheCopy code  <VirtualHost *:443>
	•	    ServerAdmin admin@localdomain
	•	    DocumentRoot /var/www/nextcloud
	•	    ServerName 192.168.1.100
	•	
	•	    Alias /nextcloud "/var/www/nextcloud/"
	•	
	•	    <Directory /var/www/nextcloud/>
	•	        Options +FollowSymlinks
	•	        AllowOverride All
	•	        Require all granted
	•	
	•	       <IfModule mod_dav.c>
	•	          Dav off
	•	       </IfModule>
	•	
	•	       SetEnv HOME /var/www/nextcloud
	•	       SetEnv HTTP_HOME /var/www/nextcloud
	•	    </Directory>
	•	
	•	    SSLEngine on
	•	    SSLCertificateFile /etc/ssl/certs/nextcloud-selfsigned.crt
	•	    SSLCertificateKeyFile /etc/ssl/private/nextcloud-selfsigned.key
	•	
	•	    ErrorLog ${APACHE_LOG_DIR}/nextcloud_ssl_error.log
	•	    CustomLog ${APACHE_LOG_DIR}/nextcloud_ssl_access.log combined
            <IfModule mod_headers.c>
                Header always set Strict-Transport-Security "max-age=15552000; includeSubDomains; preload"
            </IfModule>
	•	</VirtualHost>
	•	  
	•	Enable the SSL site: bashCopy code  sudo a2ensite default-ssl
	•	sudo systemctl restart apache2
	•	  
4. Configure Nextcloud Trusted Domains
Add your server's IP address to Nextcloud’s trusted domains to prevent any security warnings:
	•	Edit Nextcloud configuration: bashCopy code  sudo nano /var/www/nextcloud/config/config.php
	•	  
	•	Add the local IP to trusted_domains and overwrite.cli.url: phpCopy code  'trusted_domains' =>
	•	array (
	•	  0 => 'localhost',
	•	  1 => '192.168.1.100',
	•	),
	•	'overwrite.cli.url' => 'https://192.168.1.100/nextcloud',
	•	  
5. Enable .well-known Redirects for WebFinger and NodeInfo
	•	Modify the .htaccess file in your Nextcloud root directory to handle .well-known requests: bashCopy code  sudo nano /var/www/nextcloud/.htaccess
	•	  
	•	Add the following rewrite rules: apacheCopy code  <IfModule mod_rewrite.c>
	•	  RewriteEngine on
	•	  RewriteRule ^.well-known/carddav /remote.php/dav/ [R=301,L]
	•	  RewriteRule ^.well-known/caldav /remote.php/dav/ [R=301,L]
	•	  RewriteRule ^.well-known/webfinger /index.php/.well-known/webfinger [R=301,L]
	•	  RewriteRule ^.well-known/nodeinfo /index.php/.well-known/nodeinfo [R=301,L]
	•	</IfModule>
	•	  
6. Test the Setup
	1	Access Nextcloud: From your MacBook, open a browser and navigate to https://192.168.1.100/nextcloud. You may receive a warning about the self-signed certificate, which you can proceed to accept.
	2	Check .well-known Endpoints: Open the following URLs in a browser to ensure they respond correctly:
	◦	https://192.168.1.100/.well-known/webfinger
	◦	https://192.168.1.100/.well-known/nodeinfo
	3	If they redirect properly, it confirms that the .htaccess rules are functioning.
7. Accessing from Other Devices
Ensure that your firewall settings allow traffic to port 443 (HTTPS). Also, devices should be connected to the same WiFi network. On the devices, use the server's IP address (192.168.1.100) to access the Nextcloud instance.
Conclusion
By setting up your Nextcloud server with a static IP, configuring Apache to handle .well-known requests, and using a self-signed SSL certificate, you can effectively manage a local network Nextcloud server with HTTPS security, even without a domain name. This approach allows you to leverage Nextcloud’s full features and provide secure access across devices within your local network.

